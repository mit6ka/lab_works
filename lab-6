"""
Задание состоит из двух частей.
1 часть – написать программу в соответствии со своим вариантом задания. Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), сравнив по времени их выполнение.
2 часть – усложнить написанную программу, введя по своему усмотрению в условие минимум одно ограничение на характеристики объектов (которое будет сокращать количество переборов)  и целевую функцию для нахождения оптимального  решения.

Вариант 10. Вывести все натуральные числа до n, в записи которых встречается от 2 до 3 четных цифр.
"""
import time

"""
Запуск таймера для измерения времени выполнения алгоритмического подхода.
"""
start = time.perf_counter()

"""
Запрос у пользователя ввода числа n.
"""
n = int(input("Введите (n): "))

"""
Алгоритмический подход:
Поиск чисел в диапазоне от 1 до n, в которых количество четных цифр от 2 до 3.
"""
print("Алгоритмический подход:\n")
for i in range(1, n+1):
    count = 0
    for digit in str(i):
        if int(digit) % 2 == 0:
            count += 1
    if 2 <= count <= 3:
        print(i)

"""
Остановка таймера и вывод времени выполнения алгоритмического подхода.
"""
end = time.perf_counter()
execution_time = end - start
print(f"\nВремя выполнения: {execution_time} секунд\n")

"""
Запуск таймера для измерения времени выполнения функционального подхода.
"""
start1 = time.perf_counter()

"""
Функциональный подход:
Поиск чисел в диапазоне от 1 до n, в которых количество четных цифр от 2 до 3, используя генераторы списков.
"""
print("-----------------------------------------------\n\nФункциональный подход:\n")
for i in range(1, n+1):
    num = sum(1 for digit in str(i) if int(digit) % 2 == 0)
    if 2 <= num <= 3:
        print(i)

"""
Остановка таймера и вывод времени выполнения функционального подхода.
"""
end1 = time.perf_counter()
execution_time1 = end1 - start1
print(f"\nВремя выполнения: {execution_time1} секунд")

"""
Вывод разницы во времени выполнения между алгоритмическим и функциональным подходами.
"""
print(f"\n-----------------------------------------------\n\nРазница во времени: {execution_time1 - execution_time} сек")

"""
Усложненный алгоритмический подход

Проверяем, что количество четных цифр в числе от 2 до 3 с шагом 3.
    Если условие истинно, выводим число.
"""
start2 = time.perf_counter()
print("\n-----------------------------------------------\n\nУсложненный алгоритмический подход:\n")
for i in range(1, n, 3):
    count = 0
    for digit in str(i):
        if int(digit) % 2 == 0:
            count += 1
    if 2 <= count <= 3 :
        print(i)
end2 = time.perf_counter()
execution_time2 = end2 - start2
print(f"\nВремя выполнения: {execution_time2} секунд\n")

"""
Усложненный функциональный подход

Используем генераторное выражение для подсчета четных цифр в числе.
    Суммируем единицы для каждой четной цифры, найденной в числе.
    
Проверяем, что количество четных цифр в числе от 2 до 3 с шагом 3.
    Если условие истинно, выводим число.
"""
start3 = time.perf_counter()
print("-----------------------------------------------\n\nУсложненный функциональный подход:\n")
for i in range(1, n, 3):

    num = sum(1 for digit in str(i) if int(digit) % 2 == 0)

    if 2 <= num <= 3 :
        print(i)
end3 = time.perf_counter()
execution_time3 = end3 - start3
print(f"\nВремя выполнения: {execution_time1} секунд")
print(f"\n-----------------------------------------------\n\nРазница во времени: {execution_time3 - execution_time2} сек")

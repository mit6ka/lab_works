# 10.	Формируется матрица F следующим образом: скопировать в нее А и если в С количество минимальных чисел в нечетных столбцах, чем количество максимальных чисел в четных строках, 
# то поменять местами В и С симметрично, иначе С и Е поменять местами несимметрично. При этом матрица А не меняется. После чего если определитель матрицы А больше суммы диагональных элементов матрицы F,
# то вычисляется выражение: A-1*A – K * F, иначе вычисляется выражение (AТ +GТ-F-1)*K, где G-нижняя треугольная матрица, полученная из А. Выводятся по мере формирования А,
# F и все матричные операции последовательно.
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Ввод значений K и N
K = int(input("Введите K: "))
N = int(input("Введите N: "))

# Создание и заполнение матрицы A
A = np.random.randint(-10, 11, (N, N))

# Определение размеров подматриц
size = N // 2
additional_row = N % 2
additional_col = N % 2

# Создание подматриц B, C, D и E
B = A[:size, :size]
C = A[:size, size:size + size + additional_col]
D = A[size:size + size + additional_row, :size]
E = A[size:size + size + additional_row, size:size + size + additional_col]

# Формирование матрицы F
F = A.copy()

# Проверка, что подматрицы B и C содержат элементы для операций
if C.size > 0 and C.shape[1] > 1 and B.size > 0 and B.shape[0] > 1:
    min_in_C = np.min(C[:, 1::2])  # Минимальные в нечетных столбцах C
    max_in_B = np.max(B[1::2, :])  # Максимальные в четных строках B

    if np.sum(C == min_in_C) > np.sum(B == max_in_B):
        F[:size, :size], F[:size, size:size + size + additional_col] = C, B  # Меняем В и С симметрично
    else:
        F[:size, size:size + size + additional_col], F[size:size + size + additional_row, size:size + size + additional_col] = E, C  # Меняем С и Е несимметрично

# Матричные операции
det_A = np.linalg.det(A)
sum_diag_F = np.trace(F)

if det_A > sum_diag_F:
    result = np.linalg.inv(A).dot(A) - K * F
else:
    G = np.tril(A)  # Нижняя треугольная матрица G
    result = (A.T + G.T - np.linalg.inv(F)) * K

# Вывод графиков
plt.figure(figsize=(18, 6))

# Тепловая карта матрицы A
plt.subplot(1, 3, 1)
plt.title('Тепловая карта матрицы A')
plt.imshow(A, cmap='viridis')
plt.colorbar()

# Гистограмма значений матрицы F
plt.subplot(1, 3, 2)
plt.title('Гистограмма значений матрицы F')
plt.hist(F.ravel(), bins=20, color='blue', edgecolor='black')
plt.xlabel('Значения')
plt.ylabel('Частота')

# 3D поверхностный график результата матричной операции
ax = plt.subplot(1, 3, 3, projection='3d')
plt.title('3D поверхностный график результата')
X = np.arange(result.shape[0])
Y = np.arange(result.shape[1])
X, Y = np.meshgrid(X, Y)
ax.plot_surface(X, Y, result, cmap='viridis')
ax.set_xlabel('Ось X')
ax.set_ylabel('Ось Y')
ax.set_zlabel('Значения')

plt.tight_layout()
plt.show()
